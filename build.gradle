allprojects {
    apply plugin: 'base'
    apply plugin: 'idea'
    apply plugin: 'java'

    group = 'com.mycompany.osgi.demo'
}

subprojects {

    apply plugin: 'osgi'

    jar {
        manifest {
            name = bundleName
        }
    }

    repositories {
        ivy {
            artifactPattern "http://repository.springsource.com/ivy/bundles/release/[organisation]/[module]/[revision]/[artifact]-[revision].[ext]"
            artifactPattern "http://repository.springsource.com/ivy/bundles/external/[organisation]/[module]/[revision]/[artifact]-[revision].[ext]"
            ivyPattern "http://repository.springsource.com/ivy/bundles/release/[organisation]/[module]/[revision]/[artifact]-[revision].[ext]"
            ivyPattern "http://repository.springsource.com/ivy/bundles/external/[organisation]/[module]/[revision]/[artifact]-[revision].[ext]"
        }
    }

    dependencies {
        compile group: 'org.eclipse.osgi', name: 'org.eclipse.osgi', version: '3.7.1.R37x_v20110808-1106', configuration: 'runtime', ext: 'jar'
        testCompile group: 'org.junit', name: 'com.springsource.org.junit', version: '4.8.2', configuration: 'runtime', ext: 'jar'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

}

task prepareRun {
    outputs.dir runDir
    doLast {
        println "Installing Karaf to " + runDir

        println "Downloading " + karafUrl + " to " + temporaryDir.getAbsolutePath()
        def filename = karafUrl.split("/").last()
        def archiveFile = new File(temporaryDir.getAbsolutePath() + "/" + filename)
        new URL(karafUrl).withInputStream { i -> archiveFile.withOutputStream { it << i } }

        println "Extracting archive to " + temporaryDir.getAbsolutePath()
        copy {
            from tarTree(archiveFile)
            into temporaryDir.getAbsolutePath()
        }

        def archiveDir = temporaryDir.getAbsolutePath() + "/" + filename.replace(".tar.gz", "") + "/"
        println "Copying from " + archiveDir + " to " + runDir

        mkdir(runDir)

        copy {
            from archiveDir
            into runDir
        }

        delete archiveFile, archiveDir
    }
}

task run (dependsOn: prepareRun) << {
    println "Running from " + runDir
    exec {
        workingDir runDir
        commandLine  "bin/karaf"
        standardInput System.in
    }
}

task start (dependsOn: prepareRun) << {
    println "Running from " + runDir
    exec {
        workingDir runDir
        commandLine  "bin/start"
    }
}

task stop << {
    println "Running from " + runDir
    exec {
        workingDir runDir
        commandLine  "bin/stop"
    }
}

task deploy(dependsOn: getTasksByName("jar", true)) << {
    println "Deploying to " + runDir
    project.subprojects.each { p ->
        p.tasks.withType(Jar)*.outputs.each { o ->
            o.getFiles().each { f ->
                if (f.exists()) {
                    ant.copy(file: f, todir: runDir + "/deploy")
                }
            }
        }
    }
}

task createBundle << {
    def console = System.console()
    def bundleName
    def bundleDescription
    def bundleVersion
    def addActivator = false
    if (console) {
        bundleName = console.readLine('> Name of the bundle: ')

        bundleDescription = console.readLine('> Description: ')

        if (console.readLine('> Add activator (y/N): ').toLowerCase() == "y") {
            addActivator = true
        }

        bundleVersion = console.readLine('> Version (default: 1.0.0): ')
        if (!bundleVersion) {
            bundleVersion = '1.0.0'
        }
    } else {
        throw new GradleException("Cannot access console in daemon mode, please use: ./gradlew --no-daemon createBundle")
    }
    
    def moduleRoot = "${rootDir}/${bundleName}"

    mkdir("${moduleRoot}")
    mkdir("${moduleRoot}/src")
    mkdir("${moduleRoot}/src/main")
    mkdir("${moduleRoot}/src/main/java")
    mkdir("${moduleRoot}/src/main/resources")
    mkdir("${moduleRoot}/src/test")
    mkdir("${moduleRoot}/src/test/java")
    mkdir("${moduleRoot}/src/test/resources")

    def packageName = "${project.group}.${bundleName}"
    def packagePath = "${moduleRoot}/src/main/java/" + packageName.replace(".", "/")
    mkdir(packagePath)

    if (addActivator) {
        copy {
            from "${rootDir}/gradle/templates"
            include 'Activator.java.template'
            into packagePath
            rename { file -> "Activator.java"}
            expand(packageName: packageName)
        }
    }
    
    copy {
        from "${rootDir}/gradle/templates"
        include 'module.iml.template'
        into moduleRoot
        rename { file -> "${bundleName}.iml"}
    }

    copy {
        from "${rootDir}/gradle/templates"
        include 'build.gradle.template'
        into moduleRoot
        rename { file -> "build.gradle"}
        expand(addActivator: addActivator, packageName: packageName)
    }

    copy {
        from "${rootDir}/gradle/templates"
        include 'gradle.properties.template'
        into moduleRoot
        rename { file -> "gradle.properties"}
        expand(bundleDescription: bundleDescription, bundleVersion: bundleVersion)
    }

    def settingsFile = new File("${rootDir}/settings.gradle")
    settingsFile.text += "include \"${bundleName}\"\n"

}
