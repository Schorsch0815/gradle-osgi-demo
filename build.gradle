import java.util.jar.JarFile

allprojects {
    apply plugin: 'base'
    apply plugin: 'idea'
    apply plugin: 'java'

    group = 'com.mycompany.osgi.demo'
}

subprojects {

    apply plugin: 'maven'
    apply plugin: 'osgi'

    jar {
        manifest {
            name = bundleName
        }
        archiveName = project.group + "." + project.name + "-" + version + ".jar"
    }

    configurations {
        provided
    }

    sourceSets {
        main { compileClasspath += configurations.provided }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        provided "org.apache.felix:org.apache.felix.framework:4.2.1"
        compile "org.apache.felix:org.apache.felix.dependencymanager:3.1.0"
        runtime "org.apache.felix:org.apache.felix.dependencymanager.shell:3.0.1"
        runtime "org.apache.felix:org.apache.felix.metatype:1.0.8"
    }

    jar {
        manifest {
            name = bundleName
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

}

task prepareRun {
    outputs.dir karafRunDir
    doLast {
        println "Installing Karaf to " + karafRunDir

        if (new File(karafRunDir).exists()) {
            throw new GradleException("${karafRunDir} already exists, please run ./gradlew cleanPrepareRun before reinstalling")
        }

        println "Downloading " + karafDownloadUrl + " to " + temporaryDir.getAbsolutePath()
        def filename = karafDownloadUrl.split("/").last()
        def archiveFile = new File(temporaryDir.getAbsolutePath() + "/" + filename)
        new URL(karafDownloadUrl).withInputStream { i -> archiveFile.withOutputStream { it << i } }

        println "Extracting archive to " + temporaryDir.getAbsolutePath()
        copy {
            from tarTree(archiveFile)
            into temporaryDir.getAbsolutePath()
        }

        def archiveDir = temporaryDir.getAbsolutePath() + "/" + filename.replace(".tar.gz", "") + "/"
        println "Copying from " + archiveDir + " to " + karafRunDir

        mkdir(karafRunDir)

        copy {
            from archiveDir
            into karafRunDir
        }

        delete archiveFile, archiveDir
    }
}

task run (dependsOn: prepareRun) << {
    println "Running from " + karafRunDir
    exec {
        workingDir karafRunDir
        commandLine  "bin/karaf"
        standardInput System.in
    }
}

task start (dependsOn: prepareRun) {
    doLast {
        println "Running from " + karafRunDir
        exec {
            workingDir karafRunDir
            commandLine  "bin/start"
        }
    }
}

task stop {
    doLast {
        println "Running from " + karafRunDir
        exec {
            workingDir karafRunDir
            commandLine  "bin/stop"
        }
    }
}

task deploy(dependsOn: getTasksByName("jar", true)) {
    doLast {
        println "Deploying to " + karafRunDir


        def excluded = [
                "osgi.core",
                "osgi.cmpn",
                "org.apache.felix.gogo.runtime",
                "org.apache.felix.shell"
        ]

        def List<File> files = new ArrayList<File>()

        subprojects.each { p ->
            p.tasks.withType(Jar).findAll( { it.classifier.isEmpty() } ).outputs.each { o ->
                o.getFiles().each { files.add(it) }
            }
            p.configurations.runtime.each { files.add(it) }
        }

        println "Bundle list:"
        files.unique().each { f ->
            def bundleName = new JarFile(f).getManifest().mainAttributes.getValue("Bundle-SymbolicName")
            if (bundleName != null && !excluded.contains(bundleName)) {
                println " - " + bundleName
                ant.copy(file: f, todir: karafRunDir + "/deploy")
            }
        }
    }
}

task createBundle {
    doLast {
        def console = System.console()
        def bundleName
        def bundleDescription
        def bundleVersion
        def addActivator = false
        if (console) {
            bundleName = console.readLine('> Name of the bundle: ')

            bundleDescription = console.readLine('> Description: ')

            if (console.readLine('> Add activator (y/N): ').toLowerCase() == "y") {
                addActivator = true
            }

            bundleVersion = console.readLine('> Version (default: 1.0.0): ')
            if (!bundleVersion) {
                bundleVersion = '1.0.0'
            }
        } else {
            throw new GradleException("Cannot access console in daemon mode, please use: ./gradlew --no-daemon createBundle")
        }

        def moduleRoot = "${rootDir}/${bundleName}"

        mkdir("${moduleRoot}")
        mkdir("${moduleRoot}/src")
        mkdir("${moduleRoot}/src/main")
        mkdir("${moduleRoot}/src/main/java")
        mkdir("${moduleRoot}/src/main/resources")
        mkdir("${moduleRoot}/src/test")
        mkdir("${moduleRoot}/src/test/java")
        mkdir("${moduleRoot}/src/test/resources")

        def packageName = "${project.group}.${bundleName}"
        def packagePath = "${moduleRoot}/src/main/java/" + packageName.replace(".", "/")
        mkdir(packagePath)

        if (addActivator) {
            copy {
                from "${rootDir}/gradle/templates"
                include 'Activator.java.template'
                into packagePath
                rename { file -> "Activator.java"}
                expand(packageName: packageName)
            }
        }

        copy {
            from "${rootDir}/gradle/templates"
            include 'module.iml.template'
            into moduleRoot
            rename { file -> "${bundleName}.iml"}
        }

        copy {
            from "${rootDir}/gradle/templates"
            include 'build.gradle.template'
            into moduleRoot
            rename { file -> "build.gradle"}
            expand(addActivator: addActivator, packageName: packageName)
        }

        copy {
            from "${rootDir}/gradle/templates"
            include 'gradle.properties.template'
            into moduleRoot
            rename { file -> "gradle.properties"}
            expand(bundleDescription: bundleDescription, bundleVersion: bundleVersion)
        }

        def settingsFile = new File("${rootDir}/settings.gradle")
        settingsFile.text += "include \"${bundleName}\"\n"
    }
}
